<?php
// $Id$

/**
 * Implementation of hook_ctools_plugin_api().
 */
function stat_ctools_plugin_api($module, $api) {
  if ($module == 'stat' && $api == 'plugins') {
    return array('version' => 3);
  }
}

/**
 * Implementation of hook_ctools_plugin_plugins().
 */
function stat_ctools_plugin_plugins() {
  return array(
    'cache' => TRUE,
    'use hooks' => TRUE,
  );
}

/**
 * Implementation of hook_context_plugins().
 *
 * This is a ctools plugins hook.
 */
function stat_stat_plugins() {
  module_load_include('inc', 'stat', 'stat.plugins');
  return _stat_stat_plugins();
}


/**
 * Get a plugin handler.
 */
function stat_get_plugin($type = 'source', $key, $reset = FALSE) {
  static $cache = array();
  if (!isset($cache[$type][$key]) || $reset) {
    switch ($type) {
      case 'source':
        $registry = stat_sources();
        break;
      case 'displays': // this is unknown/unimplimented... we have different sources but not different displays.
        $registry = stat_displays();
        break;
    }
    if (isset($registry[$key], $registry[$key]['plugin'])) {
      ctools_include('plugins');
      $info = $registry[$key];
      $plugins = ctools_get_plugins('stat', 'plugins');
      if (isset($plugins[$info['plugin']]) && $class = ctools_plugin_get_class($plugins[$info['plugin']], 'handler')) {
        $cache[$type][$key] = new $class($key, $info);
      }
    }
  }
  return isset($cache[$type][$key]) ? $cache[$type][$key] : FALSE;
}


/**
 * Wrapper around cache_get() to make it easier for stat to pull different
 * datastores from a single cache row.
 */
function stat_cache_get($key, $reset = FALSE) {
  static $cache;
  if (!isset($cache) || $reset) {
    $cache = cache_get('stat', 'cache');
    $cache = $cache ? $cache->data : array();
  }
  return !empty($cache[$key]) ? $cache[$key] : FALSE;
}

/**
 * Wrapper around cache_set() to make it easier for stat to write different
 * datastores to a single cache row.
 */
function stat_cache_set($key, $value) {
  $cache = cache_get('stat', 'cache');
  $cache = $cache ? $cache->data : array();
  $cache[$key] = $value;
  cache_set('stat', $cache);
}

/**
 * Get all context reactions.
 */
function stat_sources($reset = FALSE) {
  return _stat_registry('sources', $reset);
}

/**
 * Retrieves & caches the context registry.
 */
function _stat_registry($key = NULL, $reset = FALSE) {
  static $registry;
  if (!isset($registry) || $reset) {
    if (!$reset && $cache = stat_cache_get('registry')) {
      $registry = $cache;
    }
    else {
      $registry = module_invoke_all('stat_registry');
      drupal_alter('stat_registry', $registry);
      stat_cache_set('registry', $registry);
    }
  }
  if (isset($key)) {
    return isset($registry[$key]) ? $registry[$key] : array();
  }
  return $registry;
}
