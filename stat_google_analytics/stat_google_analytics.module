<?php
// $Id$

function stat_google_analytics_menu() {

  $items = array();

  $items['admin/settings/stat/stat_google_analytics'] = array(
    'title' => 'Google Analytics',
    'page callback' => 'stat_google_analytics_admin_ahaha',
    'page arguments' => array('stat_admin'),
    'access arguments' => array('administer stats settings'),
    'type' => MENU_CALLBACK,
   );
	
	if(variable_get('stat_google_analytics_name','') != '') {
		$items['admin/settings/stat/google_analytics_account'] = array(
	    'title' => 'Google Account Login',
	    'page callback' => 'drupal_get_form',
	    'page arguments' => array('stat_google_analytics_admin'),
	    'access arguments' => array('administer stats settings'),
	    'type' => MENU_LOCAL_TASK,
	   );
	}

  return $items;
} // function stat_menu()

function stat_google_analytics_admin() {
  $form = array();

	$form['google_analytics']['stat_google_analytics_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#default_value' => variable_get('stat_google_analytics_name',''),
    '#size' => 15,
    '#maxlength' => 64,
    '#required' => TRUE,
  );
  $form['google_analytics']['stat_google_analytics_password'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
    '#default_value' => variable_get('stat_google_analytics_password',''),
    '#size' => 15,
    '#maxlength' => 64,
    '#required' => TRUE,
  );

	$form['google_analytics']['login'] = array(
		'#type' => 'submit',
		'#value' => t('Login'),
		'#ahah' => array(
	  	'path' => 'admin/settings/stat/stat_google_analytics',
	    'wrapper' => 'stat_google_analytics',
	    'method' => 'replace',
	    'effect' => 'fade',
			'event' => 'click',
	  ),
	);

  return system_settings_form($form);
} // function stat_admin()

function stat_google_analytics_start() {
  global $_domain, $stat_google_analytics_link;

  if(require_once(drupal_get_path('module', 'stat_google_analytics').'/analytics.class.php')) {
    $form = array();


    $ga_name = variable_get('stat_google_analytics_name','');
    $ga_pass = variable_get('stat_google_analytics_password','');
    $ga_id = variable_get('stat_google_analytics_profile_id','');
    if($ga_name==''||$ga_pass=='') {
      drupal_set_message(t('Please set your Google Analytics account information.') . ' ' . l('Click Here','admin/settings/stat',array('query'=>'destination=admin/reports/stat')),'error');
      return $form;
    }

    try {
      // construct the class
      $stat_google_analytics_link = new analytics($ga_name,$ga_pass);
      
			if($ga_id == '') {
				// grab info for the correct domain name on the account.
	      $aProfiles = $stat_google_analytics_link->getProfileList();
	      $ga_profile = $ga_profile ? $ga_profile : preg_replace('`^www.`', '', $_SERVER['HTTP_HOST']);
	      $ga_id = array_search($ga_profile,$aProfiles);
			}

      if($ga_id == '' && $domain != 'default') {
        drupal_set_message(t('Could not locate this domains profile in the Google Analytics account'),'warn');
        return $form;
      }

      // set it up to use caching
      $stat_google_analytics_link->useCache();

      //$stat_google_analytics_link->setProfileByName($domain);
      $stat_google_analytics_link->setProfileById($ga_id);

      // set the date range
      //$stat_google_analytics_link->setMonth(date('n'), date('Y'));
      // or $stat_google_analytics_link->setDateRange('YYYY-MM-DD', 'YYYY-MM-DD');
      $stat_google_analytics_link = $stat_google_analytics_link;
    } catch (Exception $e) {
			$message_explode = explode(')',$e->getMessage());
      drupal_set_message('Google Analytics API: ' . $message_explode[0].')','error'); 
    }
  }
  
  return true;
} // stat_google_analytics_init()

/**
 * Implementation of hook_form_alter().
 */
function stat_google_analytics_form_alter(&$form, $form_state, $form_id) {
	global $user, $stat_google_analytics_link;
	

  switch ($form_id) {
    case 'stat_admin':

		  $form['google_analytics'] = array(
	      '#type' => 'fieldset', 
	      '#title' => t('Google Analytics'),
				'#attributes' => array('id'=>'stat_google_analytics'),
				'#attached' => array(
			    'js' => array(
	          'vertical-tabs' => drupal_get_path('module', 'stat_google_analytics') . '/js/stat_google_analytics_admin.js',
	        ),
	      ),
	    );

			stat_google_analytics_start();
			if($stat_google_analytics_link) {
				$options = $stat_google_analytics_link->getProfileList();
				asort($options);
				$form['google_analytics']['stat_google_analytics_profile_id'] = array(
			      '#type' => 'select',
			      '#title' => t('Profile Name'),
			      '#default_value' => variable_get('stat_google_analytics_profile_id',''),
						'#options' => $options,
			  );
			}
			else {
				$form['google_analytics']['stat_google_analytics_name'] = array(
		      '#type' => 'textfield',
		      '#title' => t('Name'),
		      '#default_value' => variable_get('stat_google_analytics_name',''),
		      '#size' => 15,
		      '#maxlength' => 64,
		      '#required' => TRUE,
		    );
		    $form['google_analytics']['stat_google_analytics_password'] = array(
		      '#type' => 'password',
		      '#title' => t('Password'),
		      '#default_value' => variable_get('stat_google_analytics_password',''),
		      '#size' => 15,
		      '#maxlength' => 64,
		      '#required' => TRUE,
		    );

				$form['google_analytics']['login'] = array(
					'#type' => 'submit',
					'#value' => t('Login'),
					'#ahah' => array(
				  	'path' => 'admin/settings/stat/stat_google_analytics',
				    'wrapper' => 'stat_google_analytics',
				    'method' => 'replace',
				    'effect' => 'fade',
						'event' => 'click',
				  ),
				);
			}
   	
    break;
  }
}

function stat_google_analytics_admin_ahaha() {
	global $stat_google_analytics_link;
	
	stat_google_analytics_start();
	
	$form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  // Get the form from the cache.
  $form = form_get_cache($form_build_id, $form_state);
  $args = $form['#parameters'];
  $form_id = array_shift($args);
  // We will run some of the submit handlers so we need to disable redirecting.
  $form['#redirect'] = FALSE;
  // We need to process the form, prepare for that by setting a few internals
  // variables.
  $form['#post'] = $_POST;
  $form['#programmed'] = FALSE;
  $form_state['post'] = $_POST;
  // Build, validate and if possible, submit the form.
  drupal_process_form($form_id, $form, $form_state);
  // This call recreates the form relying solely on the form_state that the
  // drupal_process_form set up.
  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);
  // Render the new output.

	//drupal_set_message(print_r($form_state['post'],true));
	if($form_state['post']['op'] == t('Change Login')) {
		unset($form['google_analytics']['stat_google_analytics_profile_id']);
		unset($form['google_analytics']['change_login']);
	
		$form['google_analytics']['stat_google_analytics_name'] = array(
      '#type' => 'textfield',
      '#title' => t('Name'),
      '#default_value' => variable_get('stat_google_analytics_name',''),
      '#size' => 15,
      '#maxlength' => 64,
      '#required' => TRUE,
    );
    $form['google_analytics']['stat_google_analytics_password'] = array(
      '#type' => 'password',
      '#title' => t('Password'),
      '#default_value' => variable_get('stat_google_analytics_password',''),
      '#size' => 15,
      '#maxlength' => 64,
      '#required' => TRUE,
    );

		$form['google_analytics']['login'] = array(
			'#type' => 'submit',
			'#value' => t('Login'),
			'#ahah' => array(
		  	'path' => 'admin/settings/stat/stat_google_analytics',
		    'wrapper' => 'stat_google_analytics',
		    'method' => 'replace',
		    'effect' => 'fade',
				'event' => 'click',
		  ),
		);
	}
	else {
		unset($form['google_analytics']['stat_google_analytics_name']);
	  unset($form['google_analytics']['stat_google_analytics_password']);

		//drupal_set_message(print_r($stat_google_analytics_link->getProfileList(),true));
		$form['google_analytics']['stat_google_analytics_profile_id'] = array(
	      '#type' => 'select',
	      '#title' => t('Profile Name'),
	      '#default_value' => variable_get('stat_google_analytics_profile_id',''),
				'#options' => asort($stat_google_analytics_link->getProfileList()),
	  );
	}
	
	
	$form = $form['google_analytics'];
	unset($form['#prefix'], $form['#suffix']); // Prevent duplicate wrappers.
  $output = theme('status_messages') . drupal_render($form);

	drupal_json(array('status' => TRUE, 'data' => $output));
}

function stat_google_analytics_stat_provider() {
  stat_google_analytics_start();

  // make sure we have the tools to get google statistics
  if(require_once(drupal_get_path('module', 'stat_google_analytics').'/analytics.class.php')) {
    $provider['stat_google_analytics'] = array(
        '#title' => t('Google Analytics'),
        '#description' => t('Statistics pulled live from googles servers'),
        '#categories' => TRUE,
        '#sub-categories' => TRUE,
      );
    
    $provider['stat_google_analytics']['metrics'] = array(
      '#title' => t('Metrics'),
      'visitor' => array(
        '#title' => t('M1. Visitor'),
        'visitors' => array(
          'title' => t('Visitors'),
          'description' => t('Total number of visitors to your site for the requested time period. When requesting this metric, you can only combine it with time dimensions such as ga:hour or ga:year.'),
          'callback' => 'stat_google_analytics_stat_visitors',
          'dimensions' => 'time',
        ),
        'visits' => array(
          'title' => t('Visits'),
          'description' => t('A visit consists of a single-user session, which times out automatically after 30 minutes unless the visitor continues activity on your site.'),
          'callback' => 'stat_google_analytics_stat_visits',
          'dimensions' => 'time',
        ),
      ),
    );
    
    return $provider;
  }
} // function stat_google_analytics_stat_provider()

function stat_google_analytics_stat_visitors($start_date,$end_date) {
  global $stat_google_analytics_link;
  
  // set the date range
  $stat_google_analytics_link->setDateRange(date('Y\-m\-d',$start_date),date('Y\-m\-d',$end_date));

  $points = $stat_google_analytics_link->getData(array('dimensions'=>'ga:date',
                                              'metrics'    => 'ga:visits',
                                               'sort'       => 'ga:date'));

  return get_stat_google_analytics_points($points, t('Visitors'));
}

function stat_google_analytics_stat_visits($start_date,$end_date) {
  global $stat_google_analytics_link;
  
  // set the date range
  $stat_google_analytics_link->setDateRange(date('Y\-m\-d',$start_date),date('Y\-m\-d',$end_date));
  $points = $stat_google_analytics_link->getData(array('dimensions'=>'ga:date',
                                              'metrics'    => 'ga:pageviews',
                                               'sort'       => 'ga:date'));
  return get_stat_google_analytics_points($points, t('Page Views'));
}

function get_stat_google_analytics_points($ga_points, $label) {
  foreach($ga_points as $day=>$count) {
    $day2 = mktime(0, 0, 0,substr($day,4,2),substr($day,6,2),substr($day,0,4));
    $time_points[] = array($day2*1000,$count);
  }

  $points = new flotData($time_points);
  $points->label = $label;
  return $points;
}